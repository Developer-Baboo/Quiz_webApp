/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/***/ (() => {

eval("\n// Array of question objects\nconst questions = [\n    {\n        question: \"What does HTML stand for?\",\n        answers: [\n            { text: \"Hyperlink Text Markup Language\", correct: false },\n            { text: \"Hyper Transfer Markup Language\", correct: false },\n            { text: \"Hyper Text Markup Language\", correct: true },\n            { text: \"Hyperlink Transfer Markup Language\", correct: false }\n        ]\n    },\n    {\n        question: \"What is the correct HTML element for the largest heading?\",\n        answers: [\n            { text: \"h6\", correct: false },\n            { text: \"heading\", correct: false },\n            { text: \"h1\", correct: true },\n            { text: \"head\", correct: false }\n        ]\n    },\n    {\n        question: \"Which attribute is used to define inline styles in HTML?\",\n        answers: [\n            { text: \"class\", correct: false },\n            { text: \"styles\", correct: false },\n            { text: \"css\", correct: false },\n            { text: \"style\", correct: true }\n        ]\n    },\n    {\n        question: \"What does the <a> tag do in HTML?\",\n        answers: [\n            { text: \"Defines a paragraph\", correct: false },\n            { text: \"Defines a hyperlink\", correct: true },\n            { text: \"Defines a line break\", correct: false },\n            { text: \"Defines an image\", correct: false }\n        ]\n    },\n    {\n        question: \"Which tag is used for creating a table in HTML?\",\n        answers: [\n            { text: \"table\", correct: true },\n            { text: \"tr\", correct: false },\n            { text: \"td\", correct: false },\n            { text: \"th\", correct: false }\n        ]\n    },\n    {\n        question: \"In HTML, what does the <br> tag represent?\",\n        answers: [\n            { text: \"Breaks the current line and continues on the next line\", correct: true },\n            { text: \"Defines a bold text\", correct: false },\n            { text: \"Defines a block of code\", correct: false },\n            { text: \"Defines a bullet point\", correct: false }\n        ]\n    },\n    {\n        question: \"Which HTML element is used to define important text?\",\n        answers: [\n            { text: \"strong\", correct: true },\n            { text: \"em\", correct: false },\n            { text: \"bold\", correct: false },\n            { text: \"important\", correct: false }\n        ]\n    },\n    {\n        question: \"What does CSS stand for?\",\n        answers: [\n            { text: \"Computer Style Sheets\", correct: false },\n            { text: \"Colorful Style Sheets\", correct: false },\n            { text: \"Creative Style Sheets\", correct: false },\n            { text: \"Cascading Style Sheets\", correct: true }\n        ]\n    }\n];\n// Get HTML elements by their IDs\nconst questionElement = document.getElementById(\"question\");\nconst answerButtons = document.getElementById(\"answer-buttons\");\nconst nextButton = document.getElementById(\"next-btn\");\nlet currentQuestionIndex = 0;\nlet score = 0;\n// Function to start the quiz by resetting the question index and score, and showing the first question\nfunction startQuiz() {\n    currentQuestionIndex = 0;\n    score = 0;\n    if (nextButton) {\n        nextButton.innerHTML = \"Next\";\n    }\n    showQuestion();\n}\n// Function to display the current question and its answer choices\nfunction showQuestion() {\n    resetState(); // Reset the state (remove previous question and answer choices)\n    const currentQuestion = questions[currentQuestionIndex]; // Get the current question object\n    if (currentQuestion) {\n        const questionNo = currentQuestionIndex + 1; // Calculate the question number\n        if (questionElement) {\n            questionElement.innerHTML = `${questionNo}. ${currentQuestion.question}`; // Display the question text\n        }\n        if (answerButtons) {\n            // Loop through answer choices and create buttons for each answer\n            currentQuestion.answers.forEach((answer) => {\n                const button = document.createElement(\"button\");\n                button.innerHTML = answer.text;\n                button.classList.add(\"btn\");\n                answerButtons.appendChild(button);\n                if (answer.correct) {\n                    button.dataset.correct = answer.correct.toString();\n                }\n                button.addEventListener(\"click\", selectAnswer);\n            });\n        }\n    }\n}\n// Function to reset the question and answer choices\nfunction resetState() {\n    if (nextButton) {\n        nextButton.style.display = \"none\";\n    }\n    if (answerButtons) {\n        while (answerButtons.firstChild) {\n            answerButtons.removeChild(answerButtons.firstChild);\n        }\n    }\n}\n// Function to handle the user's answer selection\nfunction selectAnswer(e) {\n    const selectedBtn = e.target;\n    const isCorrect = selectedBtn.dataset.correct === \"true\";\n    if (isCorrect) {\n        selectedBtn.classList.add(\"correct\");\n        score++;\n    }\n    else {\n        selectedBtn.classList.add(\"incorrect\");\n    }\n    if (answerButtons) {\n        Array.from(answerButtons.children).forEach((button) => {\n            if (button instanceof HTMLButtonElement && button.dataset.correct === \"true\") {\n                button.classList.add(\"correct\");\n            }\n            button.setAttribute(\"disabled\", \"true\");\n        });\n    }\n    if (nextButton) {\n        nextButton.style.display = \"block\";\n    }\n}\n// Function to display the user's score and offer the option to play again\nfunction showScore() {\n    resetState();\n    if (questionElement) {\n        questionElement.innerHTML = `You scored ${score} out of ${questions.length}!`;\n    }\n    if (nextButton) {\n        nextButton.innerHTML = \"Play Again\";\n        nextButton.style.display = \"block\";\n    }\n}\n// Function to handle the Next button click, showing the next question or the final score\nfunction handleNextButton() {\n    currentQuestionIndex++;\n    if (currentQuestionIndex < questions.length) {\n        showQuestion();\n    }\n    else {\n        showScore();\n    }\n}\n// Event listener for the Next button click\nif (nextButton) {\n    nextButton.addEventListener(\"click\", () => {\n        if (currentQuestionIndex < questions.length) {\n            handleNextButton();\n        }\n        else {\n            startQuiz();\n        }\n    });\n}\n//Start Quiz When Page Loads\nstartQuiz();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/app.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/app.ts"]();
/******/ 	
/******/ })()
;